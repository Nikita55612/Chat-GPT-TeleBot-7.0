from users import User as U
from gpt import models
import tiktoken
import typing


def get_models_info():
    return "".join(
        [f"<a href='{getattr(models, i)[0].source if isinstance(getattr(models, i), list) else getattr(models, i).source}'>{i}</a>\n" 
         for i in models.list_])


class Answers:
    class En:
        start_answer0 = "Hello! How can I assist you today?"
        clear_context_answer0 = "Context cleared successfully!"
        clear_context_answer1 = "The context has already been cleared!"
        models = f"Models:\n{get_models_info()}"
        stat_not_enough_data = "There is not enough data to generate statistics!"
        load_history_timeout = "Load history timeout:"
        context_info = "Context is needed so that the neural network understands the general " \
                       "essence of the dialogue from previous messages. The saved context spends tokens. " \
                       "Context can be cleared if it is no longer relevant to the dialogue. " \
                       "You can clear the context with the command"
        context_buffer_info = "\n\nThe maximum context buffer is the limit after which no new context " \
                              "will be added. Once the limit is reached, the new context will replace the old one. " \
                              "The context can be completely disabled by setting the context buffer to 0"
        insufficient_funds = "Insufficient funds!"
        buy_tokens = "-"
        pay_except = "The pay parameter is not defined!\nSpecify the payment amount separated by a space after the pay command\nExample: /pay 75.5"
        invoice = "Invoice:"
        send_invoice_timeout = "Send invoice timeout:"
        payment_verification_timeout = "Payment verification timeout:"
        top_up_balance_info = "You can create the top-up amount yourself using the /pay command\n" \
                              "Example: /pay 121.55\n" \
                              "After payment, you must click the button:\nüîÑ Check payment\n" \
                              "For payment questions: @GPT_LiveSupport202X_bot"
        payment_failed_verification = "Payment failed verification"
    
    class Ru:
        start_answer0 = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è?"
        clear_context_answer0 = "–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!"
        clear_context_answer1 = "–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –æ—á–∏—â–µ–Ω!"
        models = f"–ú–æ–¥–µ–ª–∏:\n{get_models_info()}"
        stat_not_enough_data = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
        load_history_timeout = "–¢–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:"
        context_info = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –ø–æ–Ω–∏–º–∞–ª–∞ –æ–±—â—É—é —Å—É—Ç—å " \
                       "–¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã." \
                       "–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥–∏–∞–ª–æ–≥—É. " \
                       "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π"
        context_buffer_info = "\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç—Ç–æ –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç " \
                              "–¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.–ü–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç " \
                              "–∑–∞–º–µ–Ω—è—Ç—å —Å–æ–±–æ–π —Å—Ç–∞—Ä—ã–π. –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –≤–æ–≤—Å–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—ã—Å—Ç–∞–≤–∏–≤ –±—É—Ñ–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ 0"
        insufficient_funds = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"
        buy_tokens = "-"
        pay_except = "–ü–∞—Ä–∞–º–µ—Ç—Ä pay –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã pay\n–ü—Ä–∏–º–µ—Ä: /pay 75.5"
        invoice = "–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É:"
        send_invoice_timeout = "–¢–∞–π–º-–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞:"
        payment_verification_timeout = "–¢–∞–π–º-–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:"
        top_up_balance_info = "–°—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /pay\n" \
                              "–ü—Ä–∏–º–µ—Ä: /pay 121.55\n" \
                              "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É:\nüîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n" \
                              "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã: @GPT_LiveSupport202X_bot"
        payment_failed_verification = "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"

    en = En
    ru = Ru


def get_client_menu_text(u: U | typing.Any) -> str:
    if u.profile.language == "en":
        return f"üîê <b><i>Personal Area</i></b>\n\n" \
               f"üë§ Name: <b>{u.name} (ID: <code>{u.id}</code>)</b>\n\n" \
               f"üíé Token balance: <b>{u.profile.tokens}</b>\n" \
               f"üí∞ Balance: <b>{u.profile.balance}‚ÇΩ</b>\n" \
               f"‚è± Before token renewal: <b>{u.profile.hours_deff_reset}h</b>\n" \
               f"‚ÑπÔ∏è Status: <b>{u.profile.status}</b>" 
    else:
        return f"üîê <b><i>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</i></b>\n\n" \
               f"üë§ –ò–º—è: <b>{u.name} (ID: <code>{u.id}</code>)</b>\n\n" \
               f"üíé –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: <b>{u.profile.tokens}</b>\n" \
               f"üí∞ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å: <b>{u.profile.balance}‚ÇΩ</b>\n" \
               f"‚è± –î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: <b>{u.profile.hours_deff_reset}—á</b>\n" \
               f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: <b>{u.profile.status}</b>" 
    

def get_payment_menu_text(u: U | typing.Any) -> str:
    if u.profile.language == "en":
        return f"üíé Token balance: <b>{u.profile.tokens}</b>\n" \
               f"üí∞ Balance: <b>{u.profile.balance}‚ÇΩ</b>\n" \
               f"‚è± Before token renewal: <b>{u.profile.hours_deff_reset}h</b>\n" \
               f"‚ÑπÔ∏è Status: <b>{u.profile.status}</b>""" 
    else:
        return f"üíé –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: <b>{u.profile.tokens}</b>\n" \
               f"üí∞ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å: <b>{u.profile.balance}‚ÇΩ</b>\n" \
               f"‚è± –î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: <b>{u.profile.hours_deff_reset}—á</b>\n" \
               f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: <b>{u.profile.status}</b>"
    

def token_balance_empty_text(u: U | typing.Any) -> str:
    if u.profile.language == "en":
        return f"You have no tokens left!\nTokens will be updated in {u.profile.hours_deff_reset}h.\n" \
               f"You can buy tokens for your internal balance or subscribe for more tokens."
    else:
        return f"–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–∫–µ–Ω–æ–≤!\n–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ {u.profile.hours_deff_reset}—á.\n" \
               f"–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å " \
               f"–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤."

    
def get_settings_menu_text(u: U | typing.Any) -> str:
    if u.profile.language == "en":
        return f"‚öôÔ∏è <b><i>Settings</i></b>\n\n" \
               f"üß¨ Model: <b>{u.profile.model}</b>\n" \
               f"üàÇÔ∏è Language: <b>{u.profile.language}</b>\n"
    else:
        return f"üîê <b><i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</i></b>\n\n" \
               f"üß¨ –ú–æ–¥–µ–ª—å: <b>{u.profile.model}</b>\n" \
               f"üàÇÔ∏è –Ø–∑—ã–∫: <b>{u.profile.language}</b>\n"


def get_context_text_info(u: U | typing.Any) -> str:
    context_info, context_cost, n_buffer = "", 0, 1
    t_buffer = "Buffer" if u.profile.language == "en" else "–ë—É—Ñ–µ—Ä"
    if not u.profile.context:
        context_info = f"{t_buffer}: <b>0/{u.profile.max_context_buffer}</b>\n-\n"
    else:
        encoding = tiktoken.get_encoding("cl100k_base")
        for n, c in enumerate(u.profile.context):
            if n % 2 == 0:
                context_info += f"{t_buffer}: <b>{n_buffer}/{u.profile.max_context_buffer}</b>\n"
                n_buffer += 1
            context_info += f"{c['role']}: {c['content'][:40]}...\n"
            context_cost += len(encoding.encode(c["content"]))
    if u.profile.language == "en":
        return f"{Answers.En.context_info}\n\n" \
               f"Saved context:\n\n<b>{context_info}</b>\n" \
               f"Total context cost: <b>~{context_cost}</b> token\n" \
               f"Maximum context buffer: <b>{u.profile.max_context_buffer}</b>" 
    else:
        return f"{Answers.Ru.context_info}\n\n" \
               f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n\n<b>{context_info}</b>\n" \
               f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: <b>~{context_cost}</b> —Ç–æ–∫–µ–Ω–∞\n" \
               f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: <b>{u.profile.max_context_buffer}</b>"
    

def get_gpt_request_info(u: U | typing.Any) -> str:
    if u.profile.language == "en":
        return f"üß¨ Model: <b>{u.profile.model}</b>\n" \
               f"üóÉ Context buffer: <b>{int(len(u.profile.context) / 2)}/{u.profile.max_context_buffer}</b>\n\n" \
               f"‚è≥  Processing request..." 
    else:
        return f"üß¨ –ú–æ–¥–µ–ª—å: <b>{u.profile.model}</b>\n" \
               f"üóÉ –ë—É—Ñ–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: <b>{int(len(u.profile.context) / 2)}/{u.profile.max_context_buffer}</b>\n\n" \
               f"‚è≥  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..." 
    

def get_confirm_buy_tokens_text(u: U | typing.Any, price: float, tokens: int) -> str:
    if u.profile.language == "en":
        return f"Price: <b>{price}‚ÇΩ</b>\n" \
               f"Confirm the purchase of <b>{tokens}</b> tokens:"
    else:
        return f"–¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>\n" \
               f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É <b>{tokens}</b> —Ç–æ–∫–µ–Ω–æ–≤:"


def confirm_buy_tokens_successfully_text(u: U | typing.Any, tokens: int) -> str:
    if u.profile.language == "en":
        return f"Purchase confirmed!\n<b>{tokens}</b> tokens were credited to the account.\n" \
               f"üíé Token balance: <b>{u.profile.tokens}</b>"
    else:
        return f"–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ù–∞ —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{tokens}</b> —Ç–æ–∫–µ–Ω–æ–≤.\n" \
               f"üíé –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: <b>{u.profile.tokens}</b>"

    